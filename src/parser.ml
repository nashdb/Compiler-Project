type token =
  | NUM of (int)
  | ID of (string)
  | TYPE of (string)
  | SEMI
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | UNIT
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | AND
  | OR
  | NOT
  | PRINT
  | WHILE
  | RETURN
  | PLUS
  | MINUS
  | MULTIPLY
  | DIVIDE
  | MOD
  | CARET
  | LT
  | LE
  | EQ
  | NE
  | NEALT
  | GE
  | GT
  | GETS
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
  open Printf
  open Typ

  let mkSym(s) = Symbol.fromString s
  let mkId s = Ast.Id(mkSym s)

  let mkType string =
    match string with
    | "int"  -> Typ.Int
    | "bool" -> Typ.Bool
    | "void" -> Typ.Void
    | anythingElse -> raise(Failure "lexer: bad type")
let mkApp(x, rands) = Ast.App {rator = mkSym x; rands = rands}
let mkInt n = Ast.Literal {typ = Typ.Int; bits = n}
let mkVoid () = Ast.Literal {typ = Typ.Void; bits = 0}
let mkBool n = Ast.Literal {typ = Typ.Bool; bits = n}
let mkBinding id typ = {Ast.id = mkSym id; typ = mkType typ}
let mkAssn lhs rhs = Ast.Assign {id = mkSym lhs; expr = rhs}
let mkProc typ id formals body =
  Ast.Procedure {id = mkSym id;
                 formals = formals;
                 typ = mkType typ;
                 body = body}
let mkCall rator rands = Ast.Call {rator = mkSym rator; rands = rands}
let mkWhile expr stmt = Ast.While {expr = expr; statement = stmt}
let mkIfS expr thn els = Ast.IfS {expr = expr; thn = thn; els = els}
let mkBlk decls stmts = Ast.Block {decls = decls; statements = stmts}
# 70 "parser.ml"
let yytransl_const = [|
  260 (* SEMI *);
  261 (* COMMA *);
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* LBRACE *);
  265 (* RBRACE *);
  266 (* UNIT *);
  267 (* TRUE *);
  268 (* FALSE *);
  269 (* IF *);
  270 (* THEN *);
  271 (* ELSE *);
  272 (* AND *);
  273 (* OR *);
  274 (* NOT *);
  275 (* PRINT *);
  276 (* WHILE *);
  277 (* RETURN *);
  278 (* PLUS *);
  279 (* MINUS *);
  280 (* MULTIPLY *);
  281 (* DIVIDE *);
  282 (* MOD *);
  283 (* CARET *);
  284 (* LT *);
  285 (* LE *);
  286 (* EQ *);
  287 (* NE *);
  288 (* NEALT *);
  289 (* GE *);
  290 (* GT *);
  291 (* GETS *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
  259 (* TYPE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\004\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\005\000\005\000\
\010\000\010\000\006\000\011\000\011\000\009\000\009\000\009\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\006\000\000\000\001\000\003\000\003\000\
\005\000\004\000\003\000\001\000\005\000\007\000\004\000\003\000\
\002\000\003\000\002\000\001\000\002\000\000\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\003\000\004\000\005\000\003\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\050\000\000\000\002\000\000\000\001\000\
\003\000\000\000\000\000\000\000\000\000\019\000\000\000\000\000\
\000\000\004\000\007\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\026\000\000\000\000\000\027\000\028\000\029\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\016\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\018\000\015\000\000\000\000\000\010\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\009\000\000\000\046\000\
\000\000\013\000\000\000\000\000\014\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\012\000\025\000\013\000\027\000\049\000\
\050\000\028\000\029\000"

let yysindex = "\005\000\
\004\255\000\000\010\255\000\000\001\000\000\000\017\255\000\000\
\000\000\013\255\022\255\021\255\024\255\000\000\023\255\013\255\
\052\255\000\000\000\000\253\254\027\255\051\255\028\255\051\255\
\000\000\031\255\000\000\052\255\006\255\051\255\051\255\051\255\
\000\000\053\255\051\255\000\000\000\000\000\000\051\255\051\255\
\210\255\051\255\241\255\000\000\054\255\159\001\000\000\000\000\
\020\001\057\255\016\000\048\001\051\255\076\001\000\000\109\255\
\000\000\051\255\051\255\051\255\051\255\051\255\051\255\051\255\
\051\255\051\255\051\255\051\255\051\255\051\255\051\255\051\255\
\051\255\104\001\000\000\000\000\000\000\051\255\062\255\000\000\
\053\000\070\255\000\000\126\001\192\001\179\001\109\255\109\255\
\073\255\073\255\073\255\073\255\224\255\224\255\224\255\224\255\
\224\255\224\255\224\255\053\000\000\000\000\000\066\255\000\000\
\051\255\000\000\053\000\160\001\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\077\255\000\000\000\000\097\255\000\000\000\000\077\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\255\000\000\000\000\
\000\000\063\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\101\255\000\000\000\000\000\000\099\255\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\255\000\000\000\000\
\000\000\000\000\000\000\000\000\003\001\158\001\078\000\109\000\
\094\255\125\255\156\255\187\255\140\000\147\000\178\000\185\000\
\216\000\223\000\254\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\098\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\107\000\098\000\100\000\250\255\231\255\234\255\
\208\255\000\000\093\000"

let yytablesize = 738
let yytable = "\041\000\
\008\000\043\000\030\000\048\000\082\000\001\000\003\000\020\000\
\051\000\052\000\026\000\007\000\054\000\017\000\047\000\011\000\
\055\000\056\000\021\000\074\000\048\000\045\000\010\000\014\000\
\022\000\023\000\024\000\015\000\016\000\101\000\017\000\031\000\
\032\000\042\000\044\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\033\000\034\000\020\000\011\000\103\000\
\035\000\076\000\053\000\017\000\036\000\037\000\038\000\079\000\
\021\000\102\000\025\000\025\000\039\000\025\000\022\000\023\000\
\024\000\040\000\106\000\025\000\104\000\025\000\025\000\025\000\
\107\000\109\000\108\000\005\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\032\000\032\000\066\000\032\000\047\000\047\000\006\000\
\047\000\022\000\032\000\023\000\032\000\032\000\032\000\009\000\
\047\000\019\000\018\000\032\000\032\000\032\000\032\000\032\000\
\046\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\033\000\033\000\000\000\033\000\063\000\064\000\065\000\066\000\
\000\000\033\000\000\000\033\000\033\000\033\000\000\000\000\000\
\000\000\000\000\033\000\033\000\033\000\033\000\033\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\035\000\
\035\000\000\000\035\000\000\000\000\000\000\000\000\000\000\000\
\035\000\000\000\035\000\035\000\035\000\000\000\000\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\034\000\034\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\034\000\
\000\000\034\000\034\000\034\000\000\000\000\000\000\000\000\000\
\034\000\034\000\034\000\034\000\034\000\057\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\000\000\058\000\000\000\
\000\000\059\000\060\000\000\000\000\000\000\000\000\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\075\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\058\000\000\000\000\000\
\059\000\060\000\000\000\003\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\000\000\000\000\059\000\
\060\000\000\000\000\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\044\000\044\000\000\000\044\000\020\000\000\000\
\000\000\000\000\000\000\044\000\017\000\044\000\044\000\044\000\
\000\000\021\000\000\000\000\000\044\000\044\000\000\000\022\000\
\023\000\024\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\030\000\030\000\000\000\030\000\000\000\000\000\000\000\
\000\000\000\000\030\000\000\000\030\000\030\000\030\000\000\000\
\000\000\000\000\000\000\030\000\030\000\000\000\000\000\000\000\
\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\031\000\031\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\031\000\031\000\031\000\000\000\000\000\
\000\000\000\000\031\000\031\000\000\000\000\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\036\000\
\036\000\000\000\036\000\000\000\000\000\000\000\037\000\037\000\
\036\000\037\000\036\000\036\000\036\000\000\000\000\000\037\000\
\000\000\037\000\037\000\037\000\000\000\000\000\000\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\038\000\038\000\000\000\
\038\000\000\000\000\000\000\000\039\000\039\000\038\000\039\000\
\038\000\038\000\038\000\000\000\000\000\039\000\000\000\039\000\
\039\000\039\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\040\000\040\000\000\000\040\000\000\000\
\000\000\000\000\042\000\042\000\040\000\042\000\040\000\040\000\
\040\000\000\000\000\000\042\000\000\000\042\000\042\000\042\000\
\000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\041\000\041\000\000\000\041\000\000\000\048\000\048\000\
\000\000\048\000\041\000\000\000\041\000\041\000\041\000\048\000\
\000\000\048\000\048\000\048\000\000\000\000\000\000\000\000\000\
\078\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\058\000\000\000\000\000\059\000\060\000\000\000\000\000\000\000\
\000\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\081\000\000\000\
\000\000\000\000\000\000\000\000\058\000\000\000\000\000\059\000\
\060\000\000\000\000\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\083\000\000\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\059\000\060\000\000\000\000\000\000\000\
\000\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\100\000\000\000\
\000\000\000\000\000\000\000\000\058\000\000\000\000\000\059\000\
\060\000\000\000\000\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\058\000\000\000\105\000\059\000\060\000\000\000\
\000\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\020\000\049\000\049\000\000\000\049\000\000\000\017\000\077\000\
\000\000\000\000\049\000\021\000\049\000\000\000\049\000\059\000\
\060\000\022\000\023\000\024\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\059\000\000\000\000\000\000\000\000\000\000\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000"

let yycheck = "\022\000\
\000\000\024\000\006\001\029\000\053\000\001\000\003\001\002\001\
\031\000\032\000\017\000\002\001\035\000\008\001\009\001\003\001\
\039\000\040\000\013\001\042\000\046\000\028\000\006\001\002\001\
\019\001\020\001\021\001\007\001\005\001\078\000\008\001\035\001\
\006\001\006\001\004\001\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\001\001\002\001\002\001\003\001\081\000\
\006\001\004\001\006\001\008\001\010\001\011\001\012\001\007\001\
\013\001\004\001\004\001\005\001\018\001\007\001\019\001\020\001\
\021\001\023\001\100\000\013\001\007\001\015\001\016\001\017\001\
\015\001\107\000\105\000\007\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\004\001\005\001\027\001\007\001\004\001\005\001\007\001\
\007\001\007\001\013\001\007\001\015\001\016\001\017\001\005\000\
\015\001\016\000\015\000\022\001\023\001\024\001\025\001\026\001\
\028\000\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\004\001\005\001\255\255\007\001\024\001\025\001\026\001\027\001\
\255\255\013\001\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\004\001\
\005\001\255\255\007\001\255\255\255\255\255\255\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\004\001\005\001\
\255\255\007\001\255\255\255\255\255\255\255\255\255\255\013\001\
\255\255\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\004\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\013\001\255\255\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\004\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\013\001\255\255\255\255\
\016\001\017\001\255\255\003\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\004\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\004\001\005\001\255\255\007\001\002\001\255\255\
\255\255\255\255\255\255\013\001\008\001\015\001\016\001\017\001\
\255\255\013\001\255\255\255\255\022\001\023\001\255\255\019\001\
\020\001\021\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\004\001\005\001\255\255\007\001\255\255\255\255\255\255\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\004\001\
\005\001\255\255\007\001\255\255\255\255\255\255\004\001\005\001\
\013\001\007\001\015\001\016\001\017\001\255\255\255\255\013\001\
\255\255\015\001\016\001\017\001\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\004\001\005\001\255\255\
\007\001\255\255\255\255\255\255\004\001\005\001\013\001\007\001\
\015\001\016\001\017\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\004\001\005\001\255\255\007\001\255\255\
\255\255\255\255\004\001\005\001\013\001\007\001\015\001\016\001\
\017\001\255\255\255\255\013\001\255\255\015\001\016\001\017\001\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\004\001\005\001\255\255\007\001\255\255\004\001\005\001\
\255\255\007\001\013\001\255\255\015\001\016\001\017\001\013\001\
\255\255\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\005\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\013\001\255\255\255\255\016\001\017\001\255\255\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\007\001\255\255\
\255\255\255\255\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\007\001\255\255\255\255\255\255\255\255\255\255\
\013\001\255\255\255\255\016\001\017\001\255\255\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\007\001\255\255\
\255\255\255\255\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\013\001\255\255\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\002\001\004\001\005\001\255\255\007\001\255\255\008\001\009\001\
\255\255\255\255\013\001\013\001\015\001\255\255\017\001\016\001\
\017\001\019\001\020\001\021\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\016\001\255\255\255\255\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001"

let yynames_const = "\
  SEMI\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  UNIT\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  AND\000\
  OR\000\
  NOT\000\
  PRINT\000\
  WHILE\000\
  RETURN\000\
  PLUS\000\
  MINUS\000\
  MULTIPLY\000\
  DIVIDE\000\
  MOD\000\
  CARET\000\
  LT\000\
  LE\000\
  EQ\000\
  NE\000\
  NEALT\000\
  GE\000\
  GT\000\
  GETS\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  TYPE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'procedures) in
    Obj.repr(
# 55 "parser.mly"
                                                   ( Ast.Program(_1) )
# 427 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure) in
    Obj.repr(
# 57 "parser.mly"
                                                   ( [_1] )
# 434 "parser.ml"
               : 'procedures))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'procedures) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'procedure) in
    Obj.repr(
# 58 "parser.mly"
                                                   ( _1 @ [_2] )
# 442 "parser.ml"
               : 'procedures))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parameters) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 61 "parser.mly"
                                                   ( mkProc _1 _2 _4 _6 )
# 452 "parser.ml"
               : 'procedure))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                                                   ( [] )
# 458 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 65 "parser.mly"
                                                     ( [_1] )
# 465 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 66 "parser.mly"
                                                     ( _1::_3 )
# 473 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 70 "parser.mly"
                                                   ( Ast.Return(_2) )
# 480 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expressions) in
    Obj.repr(
# 71 "parser.mly"
                                                   ( mkCall _1 _3 )
# 488 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 72 "parser.mly"
                                                   ( mkAssn _1 _3 )
# 496 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 73 "parser.mly"
                                                   ( Ast.Print(_2) )
# 503 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 74 "parser.mly"
                                                   ( _1 )
# 510 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 75 "parser.mly"
                                                   ( mkWhile _3 _5 )
# 518 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 76 "parser.mly"
                                                   ( mkIfS _3 _5 _7)
# 527 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 79 "parser.mly"
                                                   ( mkBlk _2 _3 )
# 535 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 80 "parser.mly"
                                                   ( mkBlk [] _2 )
# 542 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 83 "parser.mly"
                                                   ( [_1] )
# 549 "parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 84 "parser.mly"
                                                   ( _1 @ [_2] )
# 557 "parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                                                   ( mkBinding _2 _1 )
# 565 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 90 "parser.mly"
                                                   ( [_1] )
# 572 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 91 "parser.mly"
                                                   ( _1 @ [_2] )
# 580 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                                                   ( [] )
# 586 "parser.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 95 "parser.mly"
                                                   ( [_1] )
# 593 "parser.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressions) in
    Obj.repr(
# 96 "parser.mly"
                                                   ( _1::_3 )
# 601 "parser.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
                                                   ( mkId(_1) )
# 608 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 99 "parser.mly"
                                                   ( mkInt _1 )
# 615 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                                                    ( mkVoid () )
# 621 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                                                   ( mkBool 1 )
# 627 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                                                   ( mkBool 0 )
# 633 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 103 "parser.mly"
                                                   ( mkApp("+", [_1; _3]) )
# 641 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 104 "parser.mly"
                                                   ( mkApp("-", [_1; _3]) )
# 649 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 105 "parser.mly"
                                                   ( mkApp("*", [_1; _3]) )
# 657 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 106 "parser.mly"
                                                   ( mkApp("/", [_1; _3]) )
# 665 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 107 "parser.mly"
                                                   ( mkApp("**", [_1; _3]) )
# 673 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 108 "parser.mly"
                                                   ( mkApp("%", [_1; _3]) )
# 681 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 109 "parser.mly"
                                                   ( mkApp("<", [_1; _3]) )
# 689 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 110 "parser.mly"
                                                   ( mkApp("<=", [_1; _3]) )
# 697 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 111 "parser.mly"
                                                   ( mkApp("==", [_1; _3]) )
# 705 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 112 "parser.mly"
                                                   ( mkApp("<>", [_1; _3]) )
# 713 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 113 "parser.mly"
                                                   ( mkApp("<>", [_1; _3]) )
# 721 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 114 "parser.mly"
                                                   ( mkApp(">", [_1; _3])  )
# 729 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 115 "parser.mly"
                                                   ( mkApp(">=", [_1; _3]) )
# 737 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 116 "parser.mly"
                                                   ( mkApp("not", [_2]) )
# 744 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 117 "parser.mly"
                                                   ( mkApp("-",[mkInt 0;_2]) )
# 751 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 118 "parser.mly"
                                                   ( _2 )
# 758 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expressions) in
    Obj.repr(
# 119 "parser.mly"
                                                   ( mkApp(_1, _3) )
# 766 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 120 "parser.mly"
                                                   ( Ast.If {expr=_3; thn=_1; els=_5} )
# 775 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 121 "parser.mly"
                                                   ( Ast.And {left=_1; right=_3} )
# 783 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 122 "parser.mly"
                                                   ( Ast.Or  {left=_1; right=_3} )
# 791 "parser.ml"
               : 'exp))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
;;
