mc: 22:58 4.25.2017. Compiling test/fact.mc in debug mode.

The input program is:

int fact(int n)
{
  if (==(n, 0)) then
    return
      1
  else
    return
      *(n, fact(-(n, 1)))
}

Type Environment is:
% : int * int -> int
* : int * int -> int
** : int * int -> int
+ : int * int -> int
- : int * int -> int
/ : int * int -> int
< : int * int -> bool
<= : int * int -> bool
<> : int * int -> bool
== : int * int -> bool
> : int * int -> bool
>= : int * int -> bool
fact : int -> int
not : bool -> bool

The program is well-typed.


After the naming phase:

int fact(int n)
{
  if (  let 
      x8 : int = 0
      x9 : int = n
      x10 : int = ==(x9, x8)
  in
    x10
  ) then
    return
      1
  else
    return
      let 
          x0 : int =
            let 
                x3 : int =
                  let 
                      x5 : int = 1
                      x6 : int = n
                      x7 : int = -(x6, x5)
                  in
                    x7
                x4 : int = fact(x3)
            in
              x4
          x1 : int = n
          x2 : int = *(x1, x0)
      in
        x2
}

After the lifting phase:

int fact(int n)
{
  if (  let 
      x8 : int = 0
      x9 : int = n
      x10 : int = ==(x9, x8)
  in
    x10
  ) then
    return
      1
  else
    return
      let 
          x5 : int = 1
          x6 : int = n
          x7 : int = -(x6, x5)
          x3 : int = x7
          x4 : int = fact(x3)
          x0 : int = x4
          x1 : int = n
          x2 : int = *(x1, x0)
      in
        x2
}

After the copyprop phase:

int fact(int n)
{
  if (  let 
      x8 : int = 0
      x10 : int = ==(n, x8)
  in
    x10
  ) then
    return
      1
  else
    return
      let 
          x5 : int = 1
          x7 : int = -(n, x5)
          x4 : int = fact(x7)
          x2 : int = *(n, x4)
      in
        x2
}

After the control phase:

fact:	(n)
	x8 = 0
	x11 = n == x8
	x10 = x11
	jmpzero x10, l0
	return 1
	jmp l1
l0:	nop
	x5 = 1
	x14 = n - x5
	x7 = x14
	x13 = call fact(x7)
	x4 = x13
	x12 = n * x4
	x2 = x12
	return x2
l1:	nop

Emitting MIPS assembley code to test/fact.asm


